%option outfile="lex.rete.cpp" header-file="lex.rete.hh"
%option prefix="rete"
%option bison-bridge bison-locations reentrant yylineno
%option never-interactive noinput nounput nounistd noyywrap

%{
#include <cstdio>
#include <cstring>
#include "rete_parser.h"

struct Condition_Base;
struct Rule;

#include "rules.tab.hh"

using namespace std;
%}

%x READ_STRING
%%
[ \t\r]                                               ;
#.*                                                   ;
<INITIAL,READ_STRING>\n                               { }
excise                                                { yylval->csval = "excise"; return COMMAND_EXCISE; }
excise-all                                            { yylval->csval = "excise-all"; return COMMAND_EXCISE_ALL; }
exit                                                  { yylval->csval = "exit"; return COMMAND_EXIT; }
quit                                                  { yylval->csval = "quit"; return COMMAND_EXIT; }
insert-wme                                            { yylval->csval = "insert-wme"; return COMMAND_INSERT_WME; }
remove-wme                                            { yylval->csval = "remove-wme"; return COMMAND_REMOVE_WME; }
source                                                { yylval->csval = "source"; return COMMAND_SOURCE; }
sp                                                    { yylval->csval = "sp"; return COMMAND_SP; }
:fringe                                               { yylval->sval = new string(yytext); return FLAG; }
-?[0-9]+\.[0-9]+                                      { yylval->fval = atof(yytext); return FLOAT; }
-?[0-9]+                                              { yylval->ival = atoi(yytext); return INT; }
\<[a-zA-Z0-9\-\*]+\>                                  { yylval->sval = new string(yytext + 1);
                                                        yylval->sval->resize(yylval->sval->size() - 1);
                                                        return VARIABLE;
                                                      }
[a-zA-Z0-9]+                                          { yylval->sval = new string(yytext); return STRING; }
[a-zA-Z0-9./\\]+[a-zA-Z0-9./\\\-*]*[a-zA-Z0-9./\\]+   { yylval->sval = new string(yytext); return STRING; }
[\^\(\)\{\}+\-\@]                                     { return yytext[0]; }
==                                                    { yylval->predicate = Rete::Rete_Predicate::EQ; return PREDICATE; }
!=                                                    { yylval->predicate = Rete::Rete_Predicate::NEQ; return PREDICATE; }
>                                                     { yylval->predicate = Rete::Rete_Predicate::GT; return PREDICATE; }
>=                                                    { yylval->predicate = Rete::Rete_Predicate::GTE; return PREDICATE; }
\<                                                    { yylval->predicate = Rete::Rete_Predicate::LT; return PREDICATE; }
\<=                                                   { yylval->predicate = Rete::Rete_Predicate::LTE; return PREDICATE; }
\|                                                    { BEGIN(READ_STRING); return '|'; }
<READ_STRING>\\\|                                     { yylval->sval = new string("\\|"); return STRING_PART_S; }
<READ_STRING>\\t                                      { yylval->sval = new string("\\t"); return STRING_PART_S; }
<READ_STRING>\\r                                      { yylval->sval = new string("\\r"); return STRING_PART_S; }
<READ_STRING>\\n                                      { yylval->sval = new string("\\n"); return STRING_PART_S; }
<READ_STRING>\|                                       { BEGIN(INITIAL); return '|'; }
<READ_STRING>\r                                       ;
<READ_STRING>[^\|\r\n]                                { yylval->cval = yytext[0]; return STRING_PART_C; }
%%
