# Blocks world 2 -- Restricted to what I think matters

sp {blocks-world*rl-action*general
  :feature 1 unsplit nil
  {
    (<s> ^blocks <blocks>)             # 1
    (<blocks> ^stack <stack>)          # 1 * S -> S
    (<stack> ^top <block>)             # S * N -> S
    (<block> ^name <block-name>)       # S * N -> S
    (<stack> ^action-out <action>)     # S * S -> S
  }                                    # S -> S
  {
    (<s> ^blocks <blocks>)             # 1
    (<blocks> ^stack <dest-stack>)     # 1 * S -> S
    (<dest-stack> ^top <dest>)         # S * N -> S
    (<dest> ^name <dest-name>)         # S * N -> S
    (<dest-stack> ^action-in <action>) # S * S -> S
  }                                    # S * S -> S*S
  #(<blocks> ^stack <dest-stack>)
-->
  = 0.0
}

sp {blocks-world*rl-fringe*dest-is-table
  :feature 2 fringe blocks-world*rl-action*general
  {
    (<s> ^blocks <blocks>)             # 1
    (<blocks> ^stack <stack>)          # 1 * S -> S
    (<stack> ^top <block>)             # S * N -> S
    (<block> ^name <block-name>)       # S * N -> S
    (<stack> ^action-out <action>)     # S * S -> S
  }                                    # S -> S
  {
    (<s> ^blocks <blocks>)             # 1
    (<blocks> ^stack <dest-stack>)     # 1 * S -> S
    (<dest-stack> ^top <dest>)         # S * N -> S
    (<dest> ^name <dest-name>)         # S * N -> S
    (<dest-stack> ^action-in <action>) # S * S -> S
  }                                    # S * S -> S*S
  #(<blocks> ^stack <dest-stack>)
  +{(<dest> ^name 0)}
-->
  = 0.0
}

sp {blocks-world*rl-fringe*dest-is-not-table
  :feature 2 fringe blocks-world*rl-action*general
  {
    (<s> ^blocks <blocks>)             # 1
    (<blocks> ^stack <stack>)          # 1 * S -> S
    (<stack> ^top <block>)             # S * N -> S
    (<block> ^name <block-name>)       # S * N -> S
    (<stack> ^action-out <action>)     # S * S -> S
  }                                    # S -> S
  {
    (<s> ^blocks <blocks>)             # 1
    (<blocks> ^stack <dest-stack>)     # 1 * S -> S
    (<dest-stack> ^top <dest>)         # S * N -> S
    (<dest> ^name <dest-name>)         # S * N -> S
    (<dest-stack> ^action-in <action>) # S * S -> S
  }                                    # S * S -> S*S
  #(<blocks> ^stack <dest-stack>)
  -{(<dest> ^name 0)}
-->
  = 0.0
}
